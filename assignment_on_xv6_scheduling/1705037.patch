diff --git a/Makefile b/Makefile
index 09d790c..d55ac61 100644
--- a/Makefile
+++ b/Makefile
@@ -51,7 +51,7 @@ TOOLPREFIX := $(shell if i386-jos-elf-objdump -i 2>&1 | grep '^elf32-i386$$' >/d
 endif
 
 # If the makefile can't find QEMU, specify its path here
-# QEMU = qemu-system-i386
+QEMU = qemu-system-x86_64
 
 # Try to infer the correct QEMU
 ifndef QEMU
@@ -181,6 +181,8 @@ UPROGS=\
 	_usertests\
 	_wc\
 	_zombie\
+	_ps\
+
 
 fs.img: mkfs README $(UPROGS)
 	./mkfs fs.img README $(UPROGS)
@@ -217,7 +219,7 @@ QEMUGDB = $(shell if $(QEMU) -help | grep -q '^-gdb'; \
 	then echo "-gdb tcp::$(GDBPORT)"; \
 	else echo "-s -p $(GDBPORT)"; fi)
 ifndef CPUS
-CPUS := 2
+CPUS := 1
 endif
 QEMUOPTS = -drive file=fs.img,index=1,media=disk,format=raw -drive file=xv6.img,index=0,media=disk,format=raw -smp $(CPUS) -m 512 $(QEMUEXTRA)
 
@@ -250,7 +252,7 @@ qemu-nox-gdb: fs.img xv6.img .gdbinit
 EXTRA=\
 	mkfs.c ulib.c user.h cat.c echo.c forktest.c grep.c kill.c\
 	ln.c ls.c mkdir.c rm.c stressfs.c usertests.c wc.c zombie.c\
-	printf.c umalloc.c\
+	printf.c umalloc.c ps.c\
 	README dot-bochsrc *.pl toc.* runoff runoff1 runoff.list\
 	.gdbinit.tmpl gdbutil\
 
diff --git a/defs.h b/defs.h
index 82fb982..af87ea7 100644
--- a/defs.h
+++ b/defs.h
@@ -9,6 +9,8 @@ struct spinlock;
 struct sleeplock;
 struct stat;
 struct superblock;
+struct pstat;
+struct pt;
 
 // bio.c
 void            binit(void);
diff --git a/proc.c b/proc.c
index 806b1b1..929dafe 100644
--- a/proc.c
+++ b/proc.c
@@ -6,11 +6,11 @@
 #include "x86.h"
 #include "proc.h"
 #include "spinlock.h"
+#include "random.c"
+#include "pstat.h"
 
-struct {
-  struct spinlock lock;
-  struct proc proc[NPROC];
-} ptable;
+
+extern struct pt ptable;
 
 static struct proc *initproc;
 
@@ -88,6 +88,7 @@ allocproc(void)
 found:
   p->state = EMBRYO;
   p->pid = nextpid++;
+  p->tickets = 1;
 
   release(&ptable.lock);
 
@@ -198,6 +199,7 @@ fork(void)
   }
   np->sz = curproc->sz;
   np->parent = curproc;
+  np->tickets = curproc->tickets;
   *np->tf = *curproc->tf;
 
   // Clear %eax so that fork returns 0 in the child.
@@ -332,26 +334,48 @@ scheduler(void)
 
     // Loop over process table looking for process to run.
     acquire(&ptable.lock);
+    int sum_of_tickets=0;
+    for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
+      if(p->state == RUNNABLE)
+        sum_of_tickets+=p->tickets;
+    }
+    if(sum_of_tickets==0)
+    {
+      release(&ptable.lock);
+      continue;
+    }
+    int chosen = random_at_most(sum_of_tickets);
+    int cml_tickets=0;
     for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
       if(p->state != RUNNABLE)
         continue;
-
+      cml_tickets+=p->tickets;
+      if (chosen > cml_tickets)
+      {
+        continue;
+      }
       // Switch to chosen process.  It is the process's job
       // to release ptable.lock and then reacquire it
       // before jumping back to us.
       c->proc = p;
       switchuvm(p);
+      int start,end;
+      acquire(&tickslock);
+      start=ticks;
+      release(&tickslock);
       p->state = RUNNING;
-
       swtch(&(c->scheduler), p->context);
       switchkvm();
-
       // Process is done running for now.
       // It should have changed its p->state before coming back.
+      acquire(&tickslock);
+      end=ticks;
+      release(&tickslock);
+      p->tick+=end-start;
       c->proc = 0;
+      break;
     }
     release(&ptable.lock);
-
   }
 }
 
@@ -381,6 +405,7 @@ sched(void)
   mycpu()->intena = intena;
 }
 
+
 // Give up the CPU for one scheduling round.
 void
 yield(void)
diff --git a/proc.h b/proc.h
index 1647114..b49a435 100644
--- a/proc.h
+++ b/proc.h
@@ -1,3 +1,4 @@
+#include "spinlock.h"
 // Per-CPU state
 struct cpu {
   uchar apicid;                // Local APIC ID
@@ -10,6 +11,8 @@ struct cpu {
   struct proc *proc;           // The process running on this cpu or null
 };
 
+
+
 extern struct cpu cpus[NCPU];
 extern int ncpu;
 
@@ -49,8 +52,14 @@ struct proc {
   struct file *ofile[NOFILE];  // Open files
   struct inode *cwd;           // Current directory
   char name[16];               // Process name (debugging)
+  int tickets;
+  int tick;
 };
 
+struct pt {
+  struct spinlock lock;
+  struct proc proc[NPROC];
+} ptable;
 // Process memory is laid out contiguously, low addresses first:
 //   text
 //   original data and bss
diff --git a/ps.c b/ps.c
new file mode 100644
index 0000000..1147219
--- /dev/null
+++ b/ps.c
@@ -0,0 +1,23 @@
+#include "types.h"
+#include "pstat.h"
+#include "user.h"
+
+int main(int argc, char * argv[])
+{
+    struct pstat allprocinfo;
+    if(getpinfo(&allprocinfo)==-1)
+    {
+        exit();
+    }
+    int curpid = getpid();
+    for(int i=0;i<NPROC;i++)
+    {
+        if(curpid==allprocinfo.pid[i])
+        {
+            printf(1,"pid : %d\n",allprocinfo.pid[i]);
+            printf(1,"tickets : %d\n",allprocinfo.tickets[i]);
+            printf(1,"ticks : %d\n",allprocinfo.ticks[i]);
+        }
+    }
+    exit();
+}
\ No newline at end of file
diff --git a/pstat.h b/pstat.h
new file mode 100644
index 0000000..03045ce
--- /dev/null
+++ b/pstat.h
@@ -0,0 +1,19 @@
+#ifndef _PSTAT_H_
+
+#define _PSTAT_H_
+
+#include "param.h"
+
+struct pstat {
+
+  int inuse[NPROC];   // whether this slot of the process table is in use (1 or 0)
+
+  int tickets[NPROC]; // the number of tickets this process has
+
+  int pid[NPROC];     // the PID of each process
+
+  int ticks[NPROC];   // the number of ticks each process has accumulated
+
+};
+
+#endif // _PSTAT_H_
\ No newline at end of file
diff --git a/random.c b/random.c
new file mode 100644
index 0000000..544998d
--- /dev/null
+++ b/random.c
@@ -0,0 +1,66 @@
+#define N 624
+#define M 397
+#define MATRIX_A 0x9908b0df
+#define UPPER_MASK 0x80000000
+#define LOWER_MASK 0x7fffffff
+#define TEMPERING_MASK_B 0x9d2c5680
+#define TEMPERING_MASK_C 0xefc60000
+#define TEMPERING_SHIFT_U(y)  (y >> 11)
+#define TEMPERING_SHIFT_S(y)  (y << 7)
+#define TEMPERING_SHIFT_T(y)  (y << 15)
+#define TEMPERING_SHIFT_L(y)  (y >> 18)
+#define RAND_MAX 0x7fffffff
+static unsigned long mt[N];
+static int mti=N+1;
+void
+sgenrand(unsigned long seed)
+{
+    mt[0]= seed & 0xffffffff;
+    for (mti=1; mti<N; mti++)
+        mt[mti] = (69069 * mt[mti-1]) & 0xffffffff;
+}
+long
+genrand()
+{
+    unsigned long y;
+    static unsigned long mag01[2]={0x0, MATRIX_A};
+    if (mti >= N) {
+        int kk;
+
+        if (mti == N+1)
+            sgenrand(4357);
+
+        for (kk=0;kk<N-M;kk++) {
+            y = (mt[kk]&UPPER_MASK)|(mt[kk+1]&LOWER_MASK);
+            mt[kk] = mt[kk+M] ^ (y >> 1) ^ mag01[y & 0x1];
+        }
+        for (;kk<N-1;kk++) {
+            y = (mt[kk]&UPPER_MASK)|(mt[kk+1]&LOWER_MASK);
+            mt[kk] = mt[kk+(M-N)] ^ (y >> 1) ^ mag01[y & 0x1];
+        }
+        y = (mt[N-1]&UPPER_MASK)|(mt[0]&LOWER_MASK);
+        mt[N-1] = mt[M-1] ^ (y >> 1) ^ mag01[y & 0x1];
+
+        mti = 0;
+    }
+  
+    y = mt[mti++];
+    y ^= TEMPERING_SHIFT_U(y);
+    y ^= TEMPERING_SHIFT_S(y) & TEMPERING_MASK_B;
+    y ^= TEMPERING_SHIFT_T(y) & TEMPERING_MASK_C;
+    y ^= TEMPERING_SHIFT_L(y);
+    return y & RAND_MAX;
+}
+long random_at_most(long max) {
+  unsigned long
+    num_bins = (unsigned long) max + 1,
+    num_rand = (unsigned long) RAND_MAX + 1,
+    bin_size = num_rand / num_bins,
+    defect   = num_rand % num_bins;
+  long x;
+  do {
+   x = genrand();
+  }
+  while (num_rand - defect <= (unsigned long)x);
+  return x/bin_size;
+}
\ No newline at end of file
diff --git a/spinlock.h b/spinlock.h
index 0a9d8e2..2734966 100644
--- a/spinlock.h
+++ b/spinlock.h
@@ -1,4 +1,7 @@
 // Mutual exclusion lock.
+#ifndef LOCK_H_
+#define LOCK_H_
+
 struct spinlock {
   uint locked;       // Is the lock held?
 
@@ -9,3 +12,6 @@ struct spinlock {
                      // that locked the lock.
 };
 
+
+#endif
+
diff --git a/syscall.c b/syscall.c
index ee85261..8ac739b 100644
--- a/syscall.c
+++ b/syscall.c
@@ -103,6 +103,8 @@ extern int sys_unlink(void);
 extern int sys_wait(void);
 extern int sys_write(void);
 extern int sys_uptime(void);
+extern int sys_settickets(void);
+extern int sys_getpinfo(void);
 
 static int (*syscalls[])(void) = {
 [SYS_fork]    sys_fork,
@@ -126,6 +128,8 @@ static int (*syscalls[])(void) = {
 [SYS_link]    sys_link,
 [SYS_mkdir]   sys_mkdir,
 [SYS_close]   sys_close,
+[SYS_settickets]   sys_settickets,
+[SYS_getpinfo] sys_getpinfo,
 };
 
 void
diff --git a/syscall.h b/syscall.h
index bc5f356..edc162b 100644
--- a/syscall.h
+++ b/syscall.h
@@ -20,3 +20,5 @@
 #define SYS_link   19
 #define SYS_mkdir  20
 #define SYS_close  21
+#define SYS_settickets  22
+#define SYS_getpinfo  23
diff --git a/sysproc.c b/sysproc.c
index 0686d29..8ac4f00 100644
--- a/sysproc.c
+++ b/sysproc.c
@@ -6,7 +6,7 @@
 #include "memlayout.h"
 #include "mmu.h"
 #include "proc.h"
-
+#include "pstat.h"
 int
 sys_fork(void)
 {
@@ -83,9 +83,48 @@ int
 sys_uptime(void)
 {
   uint xticks;
-
   acquire(&tickslock);
   xticks = ticks;
   release(&tickslock);
   return xticks;
 }
+
+
+int
+sys_settickets(void)
+{
+  int t; //t=number of tickets
+  argint(0, &t);
+  if(t<1)
+  {
+    return -1;
+  }
+  acquire(&ptable.lock);
+  myproc()->tickets = t;
+  release(&ptable.lock);
+  return 0;
+}
+
+int
+sys_getpinfo(void)
+{
+  struct proc* p;
+  acquire(&ptable.lock);
+	struct pstat* allproc;
+	if(argint(0, (int*)(&allproc)) < 0)
+		return -1;
+  int idx=0;
+	for(p = ptable.proc; p < &ptable.proc[NPROC]; p++)
+	{
+		
+		if(p->state != UNUSED)
+		{
+			allproc->pid[idx] = p->pid;
+			allproc->ticks[idx] = p->tick;
+			allproc->tickets[idx] = p->tickets;
+      idx++;
+    } 
+	}
+	release(&ptable.lock);
+	return 0;
+}
diff --git a/user.h b/user.h
index 4f99c52..68d23d7 100644
--- a/user.h
+++ b/user.h
@@ -1,3 +1,4 @@
+#include "pstat.h"
 struct stat;
 struct rtcdate;
 
@@ -23,6 +24,8 @@ int getpid(void);
 char* sbrk(int);
 int sleep(int);
 int uptime(void);
+int settickets(int);
+int getpinfo(struct pstat*);
 
 // ulib.c
 int stat(const char*, struct stat*);
diff --git a/usys.S b/usys.S
index 8bfd8a1..e059e8a 100644
--- a/usys.S
+++ b/usys.S
@@ -29,3 +29,5 @@ SYSCALL(getpid)
 SYSCALL(sbrk)
 SYSCALL(sleep)
 SYSCALL(uptime)
+SYSCALL(settickets)
+SYSCALL(getpinfo)
\ No newline at end of file
